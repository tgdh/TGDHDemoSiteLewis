using  System;
using  System.Collections.Generic;
using  System.Linq.Expressions;
using  System.Web;
using  Umbraco.Core.Models;
using  Umbraco.Core.Models.PublishedContent;
using  Umbraco.Web;
using  Umbraco.ModelsBuilder;
using  Umbraco.ModelsBuilder.Umbraco;
[assembly: PureLiveAssembly]
[assembly:ModelsBuilderAssembly(PureLive = true, SourceHash = "fab736e715952dc4")]
[assembly:System.Reflection.AssemblyVersion("0.0.0.2")]


// FILE: models.generated.cs

//------------------------------------------------------------------------------
// <auto-generated>
//   This code was generated by a tool.
//
//    Umbraco.ModelsBuilder v3.0.7.99
//
//   Changes to this file will be lost if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------















namespace Umbraco.Web.PublishedContentModels
{
	/// <summary>ezSearch</summary>
	[PublishedContentModel("ezSearch")]
	public partial class EzSearch : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "ezSearch";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public EzSearch(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<EzSearch, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Hide page?
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return this.GetPropertyValue<bool>("umbracoNaviHide"); }
		}
	}

	/// <summary>Accordion</summary>
	[PublishedContentModel("accordion")]
	public partial class Accordion : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "accordion";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Accordion(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Accordion, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Each entry will be a new accordion tab
		///</summary>
		[ImplementPropertyType("content")]
		public IEnumerable<IPublishedContent> Content
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("content"); }
		}
	}

	/// <summary>Author</summary>
	[PublishedContentModel("author")]
	public partial class Author : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "author";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Author(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Author, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Authors</summary>
	[PublishedContentModel("authors")]
	public partial class Authors : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "authors";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Authors(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Authors, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	// Mixin content Type 1106 with alias "cAdmin"
	/// <summary>C - Admin</summary>
	public partial interface ICAdmin : IPublishedContent
	{
		/// <summary>Don't follow</summary>
		bool DontFollow { get; }

		/// <summary>Hide from search</summary>
		bool HideFromSearch { get; }

		/// <summary>Invisible redirect</summary>
		object UmbracoInternalRedirectId { get; }

		/// <summary>Hide from navigation</summary>
		bool UmbracoNaviHide { get; }

		/// <summary>URL alias</summary>
		string UmbracoUrlAlias { get; }

		/// <summary>URL slug</summary>
		string UmbracoUrlName { get; }
	}

	/// <summary>C - Admin</summary>
	[PublishedContentModel("cAdmin")]
	public partial class CAdmin : PublishedContentModel, ICAdmin
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cAdmin";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CAdmin(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CAdmin, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return GetDontFollow(this); }
		}

		/// <summary>Static getter for Don't follow</summary>
		public static bool GetDontFollow(ICAdmin that) { return that.GetPropertyValue<bool>("dontFollow"); }

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return GetHideFromSearch(this); }
		}

		/// <summary>Static getter for Hide from search</summary>
		public static bool GetHideFromSearch(ICAdmin that) { return that.GetPropertyValue<bool>("hideFromSearch"); }

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return GetUmbracoInternalRedirectId(this); }
		}

		/// <summary>Static getter for Invisible redirect</summary>
		public static object GetUmbracoInternalRedirectId(ICAdmin that) { return that.GetPropertyValue("umbracoInternalRedirectId"); }

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return GetUmbracoNaviHide(this); }
		}

		/// <summary>Static getter for Hide from navigation</summary>
		public static bool GetUmbracoNaviHide(ICAdmin that) { return that.GetPropertyValue<bool>("umbracoNaviHide"); }

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return GetUmbracoUrlAlias(this); }
		}

		/// <summary>Static getter for URL alias</summary>
		public static string GetUmbracoUrlAlias(ICAdmin that) { return that.GetPropertyValue<string>("umbracoUrlAlias"); }

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return GetUmbracoUrlName(this); }
		}

		/// <summary>Static getter for URL slug</summary>
		public static string GetUmbracoUrlName(ICAdmin that) { return that.GetPropertyValue<string>("umbracoUrlName"); }
	}

	// Mixin content Type 1107 with alias "cHeadlineOnly"
	/// <summary>C - Headline only</summary>
	public partial interface ICHeadlineOnly : IPublishedContent
	{
		/// <summary>Headline</summary>
		string Headline { get; }
	}

	/// <summary>C - Headline only</summary>
	[PublishedContentModel("cHeadlineOnly")]
	public partial class CHeadlineOnly : PublishedContentModel, ICHeadlineOnly
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cHeadlineOnly";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CHeadlineOnly(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CHeadlineOnly, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return GetHeadline(this); }
		}

		/// <summary>Static getter for Headline</summary>
		public static string GetHeadline(ICHeadlineOnly that) { return that.GetPropertyValue<string>("headline"); }
	}

	// Mixin content Type 1108 with alias "cHeadlineWithExcerpt"
	/// <summary>C - Headline with excerpt</summary>
	public partial interface ICHeadlineWithExcerpt : IPublishedContent
	{
		/// <summary>Excerpt</summary>
		object Excerpt { get; }

		/// <summary>Headline</summary>
		string Headline { get; }
	}

	/// <summary>C - Headline with excerpt</summary>
	[PublishedContentModel("cHeadlineWithExcerpt")]
	public partial class CHeadlineWithExcerpt : PublishedContentModel, ICHeadlineWithExcerpt
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cHeadlineWithExcerpt";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CHeadlineWithExcerpt(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CHeadlineWithExcerpt, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Excerpt: A short description of the article
		///</summary>
		[ImplementPropertyType("excerpt")]
		public object Excerpt
		{
			get { return GetExcerpt(this); }
		}

		/// <summary>Static getter for Excerpt</summary>
		public static object GetExcerpt(ICHeadlineWithExcerpt that) { return that.GetPropertyValue("excerpt"); }

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return GetHeadline(this); }
		}

		/// <summary>Static getter for Headline</summary>
		public static string GetHeadline(ICHeadlineWithExcerpt that) { return that.GetPropertyValue<string>("headline"); }
	}

	// Mixin content Type 1109 with alias "cHeadlineWithSubtitle"
	/// <summary>C - Headline with subtitle</summary>
	public partial interface ICHeadlineWithSubtitle : IPublishedContent
	{
		/// <summary>Headline</summary>
		string Headline { get; }

		/// <summary>Subtitle</summary>
		string Subtitle { get; }
	}

	/// <summary>C - Headline with subtitle</summary>
	[PublishedContentModel("cHeadlineWithSubtitle")]
	public partial class CHeadlineWithSubtitle : PublishedContentModel, ICHeadlineWithSubtitle
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cHeadlineWithSubtitle";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CHeadlineWithSubtitle(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CHeadlineWithSubtitle, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return GetHeadline(this); }
		}

		/// <summary>Static getter for Headline</summary>
		public static string GetHeadline(ICHeadlineWithSubtitle that) { return that.GetPropertyValue<string>("headline"); }

		///<summary>
		/// Subtitle: Subtitle displayed below the page name
		///</summary>
		[ImplementPropertyType("subtitle")]
		public string Subtitle
		{
			get { return GetSubtitle(this); }
		}

		/// <summary>Static getter for Subtitle</summary>
		public static string GetSubtitle(ICHeadlineWithSubtitle that) { return that.GetPropertyValue<string>("subtitle"); }
	}

	// Mixin content Type 1110 with alias "cIntroduction"
	/// <summary>C - Introduction</summary>
	public partial interface ICIntroduction : IPublishedContent
	{
		/// <summary>Introduction</summary>
		IHtmlString Introduction { get; }
	}

	/// <summary>C - Introduction</summary>
	[PublishedContentModel("cIntroduction")]
	public partial class CIntroduction : PublishedContentModel, ICIntroduction
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cIntroduction";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CIntroduction(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CIntroduction, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Introduction: Short introduction to the page and subpages
		///</summary>
		[ImplementPropertyType("introduction")]
		public IHtmlString Introduction
		{
			get { return GetIntroduction(this); }
		}

		/// <summary>Static getter for Introduction</summary>
		public static IHtmlString GetIntroduction(ICIntroduction that) { return that.GetPropertyValue<IHtmlString>("introduction"); }
	}

	// Mixin content Type 1111 with alias "cMeta"
	/// <summary>C - Meta</summary>
	public partial interface ICMeta : IPublishedContent
	{
		/// <summary>Page description</summary>
		object PageDescription { get; }

		/// <summary>Page image</summary>
		string PageImage { get; }

		/// <summary>Page title</summary>
		string PageTitle { get; }

		/// <summary>Show Call To Action</summary>
		bool ShowCallToAction { get; }
	}

	/// <summary>C - Meta</summary>
	[PublishedContentModel("cMeta")]
	public partial class CMeta : PublishedContentModel, ICMeta
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cMeta";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CMeta(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CMeta, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return GetPageDescription(this); }
		}

		/// <summary>Static getter for Page description</summary>
		public static object GetPageDescription(ICMeta that) { return that.GetPropertyValue("pageDescription"); }

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return GetPageImage(this); }
		}

		/// <summary>Static getter for Page image</summary>
		public static string GetPageImage(ICMeta that) { return that.GetPropertyValue<string>("pageImage"); }

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return GetPageTitle(this); }
		}

		/// <summary>Static getter for Page title</summary>
		public static string GetPageTitle(ICMeta that) { return that.GetPropertyValue<string>("pageTitle"); }

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return GetShowCallToAction(this); }
		}

		/// <summary>Static getter for Show Call To Action</summary>
		public static bool GetShowCallToAction(ICMeta that) { return that.GetPropertyValue<bool>("showCallToAction"); }
	}

	/// <summary>C - Meta tags</summary>
	[PublishedContentModel("cMetaTags")]
	public partial class CMetaTags : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cMetaTags";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CMetaTags(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CMetaTags, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Tags: Add tag properties here
		///</summary>
		[ImplementPropertyType("tags")]
		public string Tags
		{
			get { return this.GetPropertyValue<string>("tags"); }
		}
	}

	// Mixin content Type 1113 with alias "cPageComponents"
	/// <summary>C - Page Components</summary>
	public partial interface ICPageComponents : IPublishedContent
	{
		/// <summary>Page content</summary>
		IEnumerable<IPublishedContent> PageContent { get; }
	}

	/// <summary>C - Page Components</summary>
	[PublishedContentModel("cPageComponents")]
	public partial class CPageComponents : PublishedContentModel, ICPageComponents
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cPageComponents";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CPageComponents(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CPageComponents, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Page content: Main content of the page
		///</summary>
		[ImplementPropertyType("pageContent")]
		public IEnumerable<IPublishedContent> PageContent
		{
			get { return GetPageContent(this); }
		}

		/// <summary>Static getter for Page content</summary>
		public static IEnumerable<IPublishedContent> GetPageContent(ICPageComponents that) { return that.GetPropertyValue<IEnumerable<IPublishedContent>>("pageContent"); }
	}

	/// <summary>C - Page Content</summary>
	[PublishedContentModel("cPageContent")]
	public partial class CPageContent : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cPageContent";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CPageContent(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CPageContent, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Textarea: This is where the main text for this section would be input. You have access to titles by pressing Format. (Optional)
		///</summary>
		[ImplementPropertyType("pageTextarea")]
		public IHtmlString PageTextarea
		{
			get { return this.GetPropertyValue<IHtmlString>("pageTextarea"); }
		}
	}

	// Mixin content Type 1115 with alias "cReleaseDate"
	/// <summary>C - Release date and time</summary>
	public partial interface ICReleaseDate : IPublishedContent
	{
		/// <summary>Release date</summary>
		DateTime ReleaseDate { get; }
	}

	/// <summary>C - Release date and time</summary>
	[PublishedContentModel("cReleaseDate")]
	public partial class CReleaseDate : PublishedContentModel, ICReleaseDate
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cReleaseDate";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CReleaseDate(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CReleaseDate, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Release date: Date and time (used for sorting)
		///</summary>
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate
		{
			get { return GetReleaseDate(this); }
		}

		/// <summary>Static getter for Release date</summary>
		public static DateTime GetReleaseDate(ICReleaseDate that) { return that.GetPropertyValue<DateTime>("releaseDate"); }
	}

	// Mixin content Type 1116 with alias "cSEO"
	/// <summary>C - SEO & Social</summary>
	public partial interface ICSeo : IPublishedContent
	{
		/// <summary>SEO description</summary>
		object SeoDescription { get; }

		/// <summary>SEO title</summary>
		object SeoTitle { get; }

		/// <summary>Social media image</summary>
		string SocialMediaImage { get; }
	}

	/// <summary>C - SEO & Social</summary>
	[PublishedContentModel("cSEO")]
	public partial class CSeo : PublishedContentModel, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "cSEO";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public CSeo(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<CSeo, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return GetSeoDescription(this); }
		}

		/// <summary>Static getter for SEO description</summary>
		public static object GetSeoDescription(ICSeo that) { return that.GetPropertyValue("seoDescription"); }

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return GetSeoTitle(this); }
		}

		/// <summary>Static getter for SEO title</summary>
		public static object GetSeoTitle(ICSeo that) { return that.GetPropertyValue("seoTitle"); }

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return GetSocialMediaImage(this); }
		}

		/// <summary>Static getter for Social media image</summary>
		public static string GetSocialMediaImage(ICSeo that) { return that.GetPropertyValue<string>("socialMediaImage"); }
	}

	/// <summary>Blog</summary>
	[PublishedContentModel("blog")]
	public partial class Blog : PublishedContentModel, ICAdmin, ICHeadlineWithSubtitle, ICIntroduction, ICMeta, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "blog";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Blog(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Blog, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Posts
		///</summary>
		[ImplementPropertyType("posts")]
		public object Posts
		{
			get { return this.GetPropertyValue("posts"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithSubtitle.GetHeadline(this); }
		}

		///<summary>
		/// Subtitle: Subtitle displayed below the page name
		///</summary>
		[ImplementPropertyType("subtitle")]
		public string Subtitle
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithSubtitle.GetSubtitle(this); }
		}

		///<summary>
		/// Introduction: Short introduction to the page and subpages
		///</summary>
		[ImplementPropertyType("introduction")]
		public IHtmlString Introduction
		{
			get { return Umbraco.Web.PublishedContentModels.CIntroduction.GetIntroduction(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Categories</summary>
	[PublishedContentModel("categories")]
	public partial class Categories : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "categories";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Categories(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Categories, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Category</summary>
	[PublishedContentModel("category")]
	public partial class Category : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "category";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Category(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Category, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}
	}

	/// <summary>Contact details</summary>
	[PublishedContentModel("contactDetail")]
	public partial class ContactDetail : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contactDetail";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContactDetail(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContactDetail, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contact details: All contact details for this section (phone, email, fax)
		///</summary>
		[ImplementPropertyType("contactDetails")]
		public IEnumerable<IPublishedContent> ContactDetails
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("contactDetails"); }
		}

		///<summary>
		/// Title: Title of the contact details block
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}
	}

	/// <summary>Contact form</summary>
	[PublishedContentModel("contactForm")]
	public partial class ContactForm : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contactForm";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContactForm(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContactForm, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Email address
		///</summary>
		[ImplementPropertyType("emailAddress")]
		public string EmailAddress
		{
			get { return this.GetPropertyValue<string>("emailAddress"); }
		}

		///<summary>
		/// Message
		///</summary>
		[ImplementPropertyType("message")]
		public string Message
		{
			get { return this.GetPropertyValue<string>("message"); }
		}

		///<summary>
		/// Name
		///</summary>
		[ImplementPropertyType("name")]
		public string Name
		{
			get { return this.GetPropertyValue<string>("name"); }
		}

		///<summary>
		/// Page name
		///</summary>
		[ImplementPropertyType("pageName")]
		public string PageName
		{
			get { return this.GetPropertyValue<string>("pageName"); }
		}
	}

	/// <summary>Downloads</summary>
	[PublishedContentModel("downloads")]
	public partial class Downloads : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "downloads";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Downloads(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Downloads, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Files: Files to be listed in the downloads area
		///</summary>
		[ImplementPropertyType("files")]
		public string Files
		{
			get { return this.GetPropertyValue<string>("files"); }
		}

		///<summary>
		/// Title: Title of the downloads area
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}
	}

	/// <summary>Embed</summary>
	[PublishedContentModel("embed")]
	public partial class Embed : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "embed";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Embed(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Embed, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Alignment: The embedded content will be aligned to this selection (full width if blank)
		///</summary>
		[ImplementPropertyType("alignment")]
		public object Alignment
		{
			get { return this.GetPropertyValue("alignment"); }
		}

		///<summary>
		/// Embed code: Embed code from source (YouTube, Google Maps)
		///</summary>
		[ImplementPropertyType("embedCode")]
		public string EmbedCode
		{
			get { return this.GetPropertyValue<string>("embedCode"); }
		}
	}

	/// <summary>Error page</summary>
	[PublishedContentModel("errorPage")]
	public partial class ErrorPage : PublishedContentModel, ICAdmin, ICHeadlineOnly, ICPageComponents
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "errorPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ErrorPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ErrorPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineOnly.GetHeadline(this); }
		}

		///<summary>
		/// Page content: Main content of the page
		///</summary>
		[ImplementPropertyType("pageContent")]
		public IEnumerable<IPublishedContent> PageContent
		{
			get { return Umbraco.Web.PublishedContentModels.CPageComponents.GetPageContent(this); }
		}
	}

	/// <summary>Form</summary>
	[PublishedContentModel("form")]
	public partial class Form : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "form";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Form(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Form, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		/*
		 * THIS PROPERTY CANNOT BE IMPLEMENTED, BECAUSE:
		 *
		 * CSharp does not support naming the property with alias
		 * "form" with the same name as content type with alias
		 * "form". Consider using an attribute to assign a different
		 * name to the property.
		 *

		///<summary>
		/// Form: Form to display
		///</summary>
		[ImplementPropertyType("form")]
		public object Form
		{
			get { return this.GetPropertyValue("form"); }
		}

		 *
		 */

		///<summary>
		/// Title: Title of the form (optional)
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}
	}

	/// <summary>Form folder</summary>
	[PublishedContentModel("formFolder")]
	public partial class FormFolder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "formFolder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public FormFolder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<FormFolder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// From address: FROM email address (default is noreply@)
		///</summary>
		[ImplementPropertyType("fromAddress")]
		public string FromAddress
		{
			get { return this.GetPropertyValue<string>("fromAddress"); }
		}

		///<summary>
		/// Internal notifications: Email address for internal notifications
		///</summary>
		[ImplementPropertyType("internalNotificationAddress")]
		public string InternalNotificationAddress
		{
			get { return this.GetPropertyValue<string>("internalNotificationAddress"); }
		}

		///<summary>
		/// Internal notifications CC: CC addresses for internal notifications (comma separated)
		///</summary>
		[ImplementPropertyType("internalNotificationCc")]
		public string InternalNotificationCc
		{
			get { return this.GetPropertyValue<string>("internalNotificationCc"); }
		}

		///<summary>
		/// Notification message: Confirmation email body send to the person submitting the form.
		///</summary>
		[ImplementPropertyType("notificationMessage")]
		public IHtmlString NotificationMessage
		{
			get { return this.GetPropertyValue<IHtmlString>("notificationMessage"); }
		}

		///<summary>
		/// Notification title: Title of the confirmation email notification
		///</summary>
		[ImplementPropertyType("notificationTitle")]
		public string NotificationTitle
		{
			get { return this.GetPropertyValue<string>("notificationTitle"); }
		}

		///<summary>
		/// Submit page: If a page is selected, the user will be redirected to it when submitting the form
		///</summary>
		[ImplementPropertyType("redirectPage")]
		public object RedirectPage
		{
			get { return this.GetPropertyValue("redirectPage"); }
		}

		///<summary>
		/// Sender name: Name of the sender
		///</summary>
		[ImplementPropertyType("senderName")]
		public string SenderName
		{
			get { return this.GetPropertyValue<string>("senderName"); }
		}

		///<summary>
		/// Send notification: Send notification email to the person who submitted the form
		///</summary>
		[ImplementPropertyType("sendNotification")]
		public bool SendNotification
		{
			get { return this.GetPropertyValue<bool>("sendNotification"); }
		}

		///<summary>
		/// Submit message: If no 'submit page' is selected (above), this message will be shown when the form is submitted
		///</summary>
		[ImplementPropertyType("submissionMessage")]
		public IHtmlString SubmissionMessage
		{
			get { return this.GetPropertyValue<IHtmlString>("submissionMessage"); }
		}
	}

	/// <summary>Gallery</summary>
	[PublishedContentModel("imageGallery")]
	public partial class ImageGallery : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "imageGallery";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ImageGallery(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ImageGallery, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Alignment: The gallery will be aligned to this selection  (full width if blank)
		///</summary>
		[ImplementPropertyType("alignment")]
		public object Alignment
		{
			get { return this.GetPropertyValue("alignment"); }
		}

		///<summary>
		/// Aspect ratio: Picking an aspect ratio will use the crop from the media section
		///</summary>
		[ImplementPropertyType("aspectRatio")]
		public object AspectRatio
		{
			get { return this.GetPropertyValue("aspectRatio"); }
		}

		///<summary>
		/// Gallery: Images for the gallery
		///</summary>
		[ImplementPropertyType("galleryIds")]
		public string GalleryIds
		{
			get { return this.GetPropertyValue<string>("galleryIds"); }
		}
	}

	/// <summary>General news</summary>
	[PublishedContentModel("generalNews")]
	public partial class GeneralNews : PublishedContentModel, ICAdmin, ICHeadlineWithSubtitle, ICMeta, ICPageComponents, ICReleaseDate, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "generalNews";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public GeneralNews(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<GeneralNews, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithSubtitle.GetHeadline(this); }
		}

		///<summary>
		/// Subtitle: Subtitle displayed below the page name
		///</summary>
		[ImplementPropertyType("subtitle")]
		public string Subtitle
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithSubtitle.GetSubtitle(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// Page content: Main content of the page
		///</summary>
		[ImplementPropertyType("pageContent")]
		public IEnumerable<IPublishedContent> PageContent
		{
			get { return Umbraco.Web.PublishedContentModels.CPageComponents.GetPageContent(this); }
		}

		///<summary>
		/// Release date: Date and time (used for sorting)
		///</summary>
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate
		{
			get { return Umbraco.Web.PublishedContentModels.CReleaseDate.GetReleaseDate(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Global settings</summary>
	[PublishedContentModel("globalSettings")]
	public partial class GlobalSettings : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "globalSettings";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public GlobalSettings(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<GlobalSettings, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Address
		///</summary>
		[ImplementPropertyType("address")]
		public string Address
		{
			get { return this.GetPropertyValue<string>("address"); }
		}

		///<summary>
		/// Contact Numbers
		///</summary>
		[ImplementPropertyType("contactNumbers")]
		public IEnumerable<IPublishedContent> ContactNumbers
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("contactNumbers"); }
		}

		///<summary>
		/// Copyright disclaimer: Legal information that appears at the bottom of the page (Press Shift + ENTER for new line)
		///</summary>
		[ImplementPropertyType("copyrightDisclaimer")]
		public object CopyrightDisclaimer
		{
			get { return this.GetPropertyValue("copyrightDisclaimer"); }
		}

		///<summary>
		/// Link
		///</summary>
		[ImplementPropertyType("ctaLink")]
		public Newtonsoft.Json.Linq.JToken CtaLink
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("ctaLink"); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("ctaTitle")]
		public string CtaTitle
		{
			get { return this.GetPropertyValue<string>("ctaTitle"); }
		}

		///<summary>
		/// Default featured image: Default image used in gateway pages and listings
		///</summary>
		[ImplementPropertyType("defaultFeaturedImage")]
		public string DefaultFeaturedImage
		{
			get { return this.GetPropertyValue<string>("defaultFeaturedImage"); }
		}

		///<summary>
		/// Default social media image: Default image used when sharing a page on social media
		///</summary>
		[ImplementPropertyType("defaultSocialMediaImage")]
		public string DefaultSocialMediaImage
		{
			get { return this.GetPropertyValue<string>("defaultSocialMediaImage"); }
		}

		///<summary>
		/// Email Addresses
		///</summary>
		[ImplementPropertyType("emailAddresses")]
		public IEnumerable<IPublishedContent> EmailAddresses
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("emailAddresses"); }
		}

		///<summary>
		/// Footer navigation: Selected pages are displayed at the bottom of the page
		///</summary>
		[ImplementPropertyType("footerNavigation")]
		public string FooterNavigation
		{
			get { return this.GetPropertyValue<string>("footerNavigation"); }
		}

		///<summary>
		/// Social Icons
		///</summary>
		[ImplementPropertyType("socialIcons")]
		public IEnumerable<IPublishedContent> SocialIcons
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("socialIcons"); }
		}

		///<summary>
		/// Tracking Id: Google Analytics ID (UA-000000-01)
		///</summary>
		[ImplementPropertyType("trackingId")]
		public string TrackingId
		{
			get { return this.GetPropertyValue<string>("trackingId"); }
		}

		///<summary>
		/// Website name: This is used in titles on search engines and social media
		///</summary>
		[ImplementPropertyType("websiteName")]
		public object WebsiteName
		{
			get { return this.GetPropertyValue("websiteName"); }
		}
	}

	/// <summary>Home</summary>
	[PublishedContentModel("home")]
	public partial class Home : PublishedContentModel, ICAdmin, ICMeta, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "home";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Home(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Home, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Background Image
		///</summary>
		[ImplementPropertyType("aboutBackgroundImage")]
		public string AboutBackgroundImage
		{
			get { return this.GetPropertyValue<string>("aboutBackgroundImage"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("aboutContent")]
		public string AboutContent
		{
			get { return this.GetPropertyValue<string>("aboutContent"); }
		}

		///<summary>
		/// Heading
		///</summary>
		[ImplementPropertyType("aboutHeading")]
		public string AboutHeading
		{
			get { return this.GetPropertyValue<string>("aboutHeading"); }
		}

		///<summary>
		/// Link
		///</summary>
		[ImplementPropertyType("aboutLink")]
		public Newtonsoft.Json.Linq.JToken AboutLink
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("aboutLink"); }
		}

		///<summary>
		/// Background Image
		///</summary>
		[ImplementPropertyType("coverBackgroundImage")]
		public string CoverBackgroundImage
		{
			get { return this.GetPropertyValue<string>("coverBackgroundImage"); }
		}

		///<summary>
		/// Heading
		///</summary>
		[ImplementPropertyType("coverHeading")]
		public string CoverHeading
		{
			get { return this.GetPropertyValue<string>("coverHeading"); }
		}

		///<summary>
		/// Link
		///</summary>
		[ImplementPropertyType("coverLink")]
		public Newtonsoft.Json.Linq.JToken CoverLink
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("coverLink"); }
		}

		///<summary>
		/// Sub heading
		///</summary>
		[ImplementPropertyType("coverSubHeading")]
		public string CoverSubHeading
		{
			get { return this.GetPropertyValue<string>("coverSubHeading"); }
		}

		///<summary>
		/// Featured Items
		///</summary>
		[ImplementPropertyType("featuredItems")]
		public IEnumerable<IPublishedContent> FeaturedItems
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("featuredItems"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("featuredTextContent")]
		public string FeaturedTextContent
		{
			get { return this.GetPropertyValue<string>("featuredTextContent"); }
		}

		///<summary>
		/// Heading
		///</summary>
		[ImplementPropertyType("featuredTextHeading")]
		public string FeaturedTextHeading
		{
			get { return this.GetPropertyValue<string>("featuredTextHeading"); }
		}

		///<summary>
		/// Sub Heading
		///</summary>
		[ImplementPropertyType("featuredTextSubHeading")]
		public string FeaturedTextSubHeading
		{
			get { return this.GetPropertyValue<string>("featuredTextSubHeading"); }
		}

		///<summary>
		/// Features Area Title: Default: Features
		///</summary>
		[ImplementPropertyType("featuresAreaTitle")]
		public string FeaturesAreaTitle
		{
			get { return this.GetPropertyValue<string>("featuresAreaTitle"); }
		}

		///<summary>
		/// Images
		///</summary>
		[ImplementPropertyType("galleryImages")]
		public string GalleryImages
		{
			get { return this.GetPropertyValue<string>("galleryImages"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("introContent")]
		public IHtmlString IntroContent
		{
			get { return this.GetPropertyValue<IHtmlString>("introContent"); }
		}

		///<summary>
		/// Heading
		///</summary>
		[ImplementPropertyType("introHeading")]
		public string IntroHeading
		{
			get { return this.GetPropertyValue<string>("introHeading"); }
		}

		///<summary>
		/// Link
		///</summary>
		[ImplementPropertyType("introLink")]
		public Newtonsoft.Json.Linq.JToken IntroLink
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("introLink"); }
		}

		///<summary>
		/// Sub heading
		///</summary>
		[ImplementPropertyType("introSubHeading")]
		public string IntroSubHeading
		{
			get { return this.GetPropertyValue<string>("introSubHeading"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("singleImage")]
	public partial class SingleImage : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "singleImage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SingleImage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SingleImage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Alignment: The image will be aligned to this selection  (full width if blank)
		///</summary>
		[ImplementPropertyType("alignment")]
		public object Alignment
		{
			get { return this.GetPropertyValue("alignment"); }
		}

		///<summary>
		/// Aspect ratio: Picking an aspect ratio will use the crop from the media section
		///</summary>
		[ImplementPropertyType("aspectRatio")]
		public object AspectRatio
		{
			get { return this.GetPropertyValue("aspectRatio"); }
		}

		///<summary>
		/// Image: Pick an image from the media library
		///</summary>
		[ImplementPropertyType("imageId")]
		public string ImageId
		{
			get { return this.GetPropertyValue<string>("imageId"); }
		}
	}

	/// <summary>In the media</summary>
	[PublishedContentModel("inTheMedia")]
	public partial class InTheMedia : PublishedContentModel, ICHeadlineWithExcerpt, ICMeta, ICReleaseDate
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "inTheMedia";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public InTheMedia(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<InTheMedia, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Source: Link to the source
		///</summary>
		[ImplementPropertyType("source")]
		public string Source
		{
			get { return this.GetPropertyValue<string>("source"); }
		}

		///<summary>
		/// Excerpt: A short description of the article
		///</summary>
		[ImplementPropertyType("excerpt")]
		public object Excerpt
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithExcerpt.GetExcerpt(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithExcerpt.GetHeadline(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// Release date: Date and time (used for sorting)
		///</summary>
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate
		{
			get { return Umbraco.Web.PublishedContentModels.CReleaseDate.GetReleaseDate(this); }
		}
	}

	/// <summary>Label with value</summary>
	[PublishedContentModel("keyValue")]
	public partial class KeyValue : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "keyValue";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public KeyValue(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<KeyValue, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Label: Label of the value
		///</summary>
		[ImplementPropertyType("label")]
		public object Label
		{
			get { return this.GetPropertyValue("label"); }
		}

		///<summary>
		/// Value: Value shown
		///</summary>
		[ImplementPropertyType("value")]
		public string Value
		{
			get { return this.GetPropertyValue<string>("value"); }
		}
	}

	/// <summary>Logo with link</summary>
	[PublishedContentModel("logoWithLink")]
	public partial class LogoWithLink : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "logoWithLink";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public LogoWithLink(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<LogoWithLink, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Logo: Logo
		///</summary>
		[ImplementPropertyType("imageId")]
		public string ImageId
		{
			get { return this.GetPropertyValue<string>("imageId"); }
		}

		///<summary>
		/// Link name: Link name
		///</summary>
		[ImplementPropertyType("linkName")]
		public string LinkName
		{
			get { return this.GetPropertyValue<string>("linkName"); }
		}

		///<summary>
		/// Link url: Link URL to a source
		///</summary>
		[ImplementPropertyType("linkUrl")]
		public string LinkUrl
		{
			get { return this.GetPropertyValue<string>("linkUrl"); }
		}
	}

	/// <summary>News</summary>
	[PublishedContentModel("news")]
	public partial class News : PublishedContentModel, ICAdmin, ICHeadlineWithSubtitle, ICIntroduction, ICMeta, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "news";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public News(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<News, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Articles
		///</summary>
		[ImplementPropertyType("articles")]
		public object Articles
		{
			get { return this.GetPropertyValue("articles"); }
		}

		///<summary>
		/// No results message: Message shown when there are no results found
		///</summary>
		[ImplementPropertyType("noResultsMessage")]
		public IHtmlString NoResultsMessage
		{
			get { return this.GetPropertyValue<IHtmlString>("noResultsMessage"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithSubtitle.GetHeadline(this); }
		}

		///<summary>
		/// Subtitle: Subtitle displayed below the page name
		///</summary>
		[ImplementPropertyType("subtitle")]
		public string Subtitle
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithSubtitle.GetSubtitle(this); }
		}

		///<summary>
		/// Introduction: Short introduction to the page and subpages
		///</summary>
		[ImplementPropertyType("introduction")]
		public IHtmlString Introduction
		{
			get { return Umbraco.Web.PublishedContentModels.CIntroduction.GetIntroduction(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Not found</summary>
	[PublishedContentModel("notFound")]
	public partial class NotFound : PublishedContentModel, ICAdmin, ICHeadlineOnly, ICPageComponents
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "notFound";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public NotFound(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<NotFound, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineOnly.GetHeadline(this); }
		}

		///<summary>
		/// Page content: Main content of the page
		///</summary>
		[ImplementPropertyType("pageContent")]
		public IEnumerable<IPublishedContent> PageContent
		{
			get { return Umbraco.Web.PublishedContentModels.CPageComponents.GetPageContent(this); }
		}
	}

	/// <summary>Post</summary>
	[PublishedContentModel("post")]
	public partial class Post : PublishedContentModel, ICAdmin, ICHeadlineWithSubtitle, ICMeta, ICPageComponents, ICReleaseDate, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "post";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Post(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Post, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Author: Author of the post
		///</summary>
		[ImplementPropertyType("author")]
		public string Author
		{
			get { return this.GetPropertyValue<string>("author"); }
		}

		///<summary>
		/// Category: Category of the post
		///</summary>
		[ImplementPropertyType("category")]
		public string Category
		{
			get { return this.GetPropertyValue<string>("category"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithSubtitle.GetHeadline(this); }
		}

		///<summary>
		/// Subtitle: Subtitle displayed below the page name
		///</summary>
		[ImplementPropertyType("subtitle")]
		public string Subtitle
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithSubtitle.GetSubtitle(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// Page content: Main content of the page
		///</summary>
		[ImplementPropertyType("pageContent")]
		public IEnumerable<IPublishedContent> PageContent
		{
			get { return Umbraco.Web.PublishedContentModels.CPageComponents.GetPageContent(this); }
		}

		///<summary>
		/// Release date: Date and time (used for sorting)
		///</summary>
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate
		{
			get { return Umbraco.Web.PublishedContentModels.CReleaseDate.GetReleaseDate(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Press release</summary>
	[PublishedContentModel("pressRelease")]
	public partial class PressRelease : PublishedContentModel, ICAdmin, ICHeadlineWithSubtitle, ICMeta, ICPageComponents, ICReleaseDate, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "pressRelease";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public PressRelease(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<PressRelease, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithSubtitle.GetHeadline(this); }
		}

		///<summary>
		/// Subtitle: Subtitle displayed below the page name
		///</summary>
		[ImplementPropertyType("subtitle")]
		public string Subtitle
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineWithSubtitle.GetSubtitle(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// Page content: Main content of the page
		///</summary>
		[ImplementPropertyType("pageContent")]
		public IEnumerable<IPublishedContent> PageContent
		{
			get { return Umbraco.Web.PublishedContentModels.CPageComponents.GetPageContent(this); }
		}

		///<summary>
		/// Release date: Date and time (used for sorting)
		///</summary>
		[ImplementPropertyType("releaseDate")]
		public DateTime ReleaseDate
		{
			get { return Umbraco.Web.PublishedContentModels.CReleaseDate.GetReleaseDate(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Quote</summary>
	[PublishedContentModel("quote")]
	public partial class Quote : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "quote";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Quote(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Quote, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Alignment
		///</summary>
		[ImplementPropertyType("alignment")]
		public object Alignment
		{
			get { return this.GetPropertyValue("alignment"); }
		}

		///<summary>
		/// Highlighted: Checking this box will increase the font size and set the background colour to black.
		///</summary>
		[ImplementPropertyType("highlighted")]
		public bool Highlighted
		{
			get { return this.GetPropertyValue<bool>("highlighted"); }
		}

		///<summary>
		/// Quote
		///</summary>
		[ImplementPropertyType("quoteMessage")]
		public object QuoteMessage
		{
			get { return this.GetPropertyValue("quoteMessage"); }
		}

		///<summary>
		/// Source
		///</summary>
		[ImplementPropertyType("source")]
		public string Source
		{
			get { return this.GetPropertyValue<string>("source"); }
		}
	}

	/// <summary>Sitemap</summary>
	[PublishedContentModel("sitemap")]
	public partial class Sitemap : PublishedContentModel, ICAdmin, ICHeadlineOnly, ICIntroduction, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "sitemap";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Sitemap(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Sitemap, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Headline: If left blank, the page name will be used
		///</summary>
		[ImplementPropertyType("headline")]
		public string Headline
		{
			get { return Umbraco.Web.PublishedContentModels.CHeadlineOnly.GetHeadline(this); }
		}

		///<summary>
		/// Introduction: Short introduction to the page and subpages
		///</summary>
		[ImplementPropertyType("introduction")]
		public IHtmlString Introduction
		{
			get { return Umbraco.Web.PublishedContentModels.CIntroduction.GetIntroduction(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Social platform</summary>
	[PublishedContentModel("socialPlatform")]
	public partial class SocialPlatform : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "socialPlatform";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SocialPlatform(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SocialPlatform, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Link: Full link to the chosen social platform account (with http://)
		///</summary>
		[ImplementPropertyType("socialPlatformLink")]
		public string SocialPlatformLink
		{
			get { return this.GetPropertyValue<string>("socialPlatformLink"); }
		}

		///<summary>
		/// Social platform: Social platform name
		///</summary>
		[ImplementPropertyType("socialPlatformName")]
		public object SocialPlatformName
		{
			get { return this.GetPropertyValue("socialPlatformName"); }
		}
	}

	/// <summary>Tabs</summary>
	[PublishedContentModel("tabs")]
	public partial class Tabs : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "tabs";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Tabs(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Tabs, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Each entry will be a new tab
		///</summary>
		[ImplementPropertyType("content")]
		public IEnumerable<IPublishedContent> Content
		{
			get { return this.GetPropertyValue<IEnumerable<IPublishedContent>>("content"); }
		}
	}

	/// <summary>Tags</summary>
	[PublishedContentModel("tagSettings")]
	public partial class TagSettings : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "tagSettings";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public TagSettings(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<TagSettings, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// No results message: Message shown when no results are found
		///</summary>
		[ImplementPropertyType("noResultsMessage")]
		public IHtmlString NoResultsMessage
		{
			get { return this.GetPropertyValue<IHtmlString>("noResultsMessage"); }
		}
	}

	/// <summary>Text Page</summary>
	[PublishedContentModel("textPage")]
	public partial class TextPage : PublishedContentModel, ICAdmin, ICMeta, ICPageComponents, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "textPage";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public TextPage(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<TextPage, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// Page content: Main content of the page
		///</summary>
		[ImplementPropertyType("pageContent")]
		public IEnumerable<IPublishedContent> PageContent
		{
			get { return Umbraco.Web.PublishedContentModels.CPageComponents.GetPageContent(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Textarea</summary>
	[PublishedContentModel("textarea")]
	public partial class Textarea : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "textarea";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Textarea(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Textarea, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Label: Internal use label for this area (not visible on the website)
		///</summary>
		[ImplementPropertyType("label")]
		public string Label
		{
			get { return this.GetPropertyValue<string>("label"); }
		}

		///<summary>
		/// Content: Text content for the page
		///</summary>
		[ImplementPropertyType("text")]
		public IHtmlString Text
		{
			get { return this.GetPropertyValue<IHtmlString>("text"); }
		}
	}

	/// <summary>Title with text</summary>
	[PublishedContentModel("titleWithText")]
	public partial class TitleWithText : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "titleWithText";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public TitleWithText(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<TitleWithText, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content: Text content for this section
		///</summary>
		[ImplementPropertyType("content")]
		public IHtmlString Content
		{
			get { return this.GetPropertyValue<IHtmlString>("content"); }
		}

		///<summary>
		/// Title: Title of this section
		///</summary>
		[ImplementPropertyType("title")]
		public string Title
		{
			get { return this.GetPropertyValue<string>("title"); }
		}
	}

	/// <summary>Gateway</summary>
	[PublishedContentModel("gateway")]
	public partial class Gateway : PublishedContentModel, ICAdmin, ICMeta, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "gateway";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Gateway(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Gateway, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Featured Pages: Choose the two featured pages. If no pages are shown the pages will list out in order.
		///</summary>
		[ImplementPropertyType("gatewayFeaturedPages")]
		public string GatewayFeaturedPages
		{
			get { return this.GetPropertyValue<string>("gatewayFeaturedPages"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Social Icon</summary>
	[PublishedContentModel("socialIcon")]
	public partial class SocialIcon : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "socialIcon";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public SocialIcon(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<SocialIcon, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Icon Title
		///</summary>
		[ImplementPropertyType("iconTitle")]
		public object IconTitle
		{
			get { return this.GetPropertyValue("iconTitle"); }
		}

		///<summary>
		/// Icon URL
		///</summary>
		[ImplementPropertyType("iconURL")]
		public string IconUrl
		{
			get { return this.GetPropertyValue<string>("iconURL"); }
		}
	}

	/// <summary>Contact</summary>
	[PublishedContentModel("contact")]
	public partial class Contact : PublishedContentModel, ICAdmin, ICMeta, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contact";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Contact(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Contact, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Features</summary>
	[PublishedContentModel("features")]
	public partial class Features : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "features";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public Features(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Features, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Bottom Text
		///</summary>
		[ImplementPropertyType("fancyText")]
		public string FancyText
		{
			get { return this.GetPropertyValue<string>("fancyText"); }
		}

		///<summary>
		/// Description
		///</summary>
		[ImplementPropertyType("featureDescription")]
		public object FeatureDescription
		{
			get { return this.GetPropertyValue("featureDescription"); }
		}

		///<summary>
		/// Icon
		///</summary>
		[ImplementPropertyType("featureIcon")]
		public string FeatureIcon
		{
			get { return this.GetPropertyValue<string>("featureIcon"); }
		}

		///<summary>
		/// Link
		///</summary>
		[ImplementPropertyType("featureLink")]
		public Newtonsoft.Json.Linq.JToken FeatureLink
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("featureLink"); }
		}

		///<summary>
		/// Title
		///</summary>
		[ImplementPropertyType("featureTitle")]
		public string FeatureTitle
		{
			get { return this.GetPropertyValue<string>("featureTitle"); }
		}
	}

	/// <summary>About</summary>
	[PublishedContentModel("about")]
	public partial class About : PublishedContentModel, ICAdmin, ICMeta, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "about";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public About(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<About, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("featuredTextContent")]
		public IHtmlString FeaturedTextContent
		{
			get { return this.GetPropertyValue<IHtmlString>("featuredTextContent"); }
		}

		///<summary>
		/// Link
		///</summary>
		[ImplementPropertyType("featuredTextLink")]
		public Newtonsoft.Json.Linq.JToken FeaturedTextLink
		{
			get { return this.GetPropertyValue<Newtonsoft.Json.Linq.JToken>("featuredTextLink"); }
		}

		///<summary>
		/// Content
		///</summary>
		[ImplementPropertyType("ourTeamContent")]
		public string OurTeamContent
		{
			get { return this.GetPropertyValue<string>("ourTeamContent"); }
		}

		///<summary>
		/// List of points
		///</summary>
		[ImplementPropertyType("ourTeamPoints")]
		public IHtmlString OurTeamPoints
		{
			get { return this.GetPropertyValue<IHtmlString>("ourTeamPoints"); }
		}

		///<summary>
		/// Heading
		///</summary>
		[ImplementPropertyType("ourTeamTitle")]
		public string OurTeamTitle
		{
			get { return this.GetPropertyValue<string>("ourTeamTitle"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Team Member</summary>
	[PublishedContentModel("teamMember")]
	public partial class TeamMember : PublishedContentModel, ICAdmin, ICMeta, ICPageComponents, ICSeo
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "teamMember";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public TeamMember(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<TeamMember, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Email
		///</summary>
		[ImplementPropertyType("memberEmail")]
		public string MemberEmail
		{
			get { return this.GetPropertyValue<string>("memberEmail"); }
		}

		///<summary>
		/// Image
		///</summary>
		[ImplementPropertyType("memberImage")]
		public string MemberImage
		{
			get { return this.GetPropertyValue<string>("memberImage"); }
		}

		///<summary>
		/// Job title
		///</summary>
		[ImplementPropertyType("memberJobTitle")]
		public string MemberJobTitle
		{
			get { return this.GetPropertyValue<string>("memberJobTitle"); }
		}

		///<summary>
		/// Name
		///</summary>
		[ImplementPropertyType("memberName")]
		public string MemberName
		{
			get { return this.GetPropertyValue<string>("memberName"); }
		}

		///<summary>
		/// Phone extension
		///</summary>
		[ImplementPropertyType("memberPhoneExt")]
		public string MemberPhoneExt
		{
			get { return this.GetPropertyValue<string>("memberPhoneExt"); }
		}

		///<summary>
		/// Don't follow: When checked the page has a "noindex, nofollow" meta tag
		///</summary>
		[ImplementPropertyType("dontFollow")]
		public bool DontFollow
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetDontFollow(this); }
		}

		///<summary>
		/// Hide from search: Checking this will hide the age from the site search results
		///</summary>
		[ImplementPropertyType("hideFromSearch")]
		public bool HideFromSearch
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetHideFromSearch(this); }
		}

		///<summary>
		/// Invisible redirect: Redirect to the selected page with NO URL redirection
		///</summary>
		[ImplementPropertyType("umbracoInternalRedirectId")]
		public object UmbracoInternalRedirectId
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoInternalRedirectId(this); }
		}

		///<summary>
		/// Hide from navigation: Checking this will hide the page from the navigation
		///</summary>
		[ImplementPropertyType("umbracoNaviHide")]
		public bool UmbracoNaviHide
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoNaviHide(this); }
		}

		///<summary>
		/// URL alias: Optionally create multiple URLs for the same page. Use wisely, too many can damage SEO ranking
		///</summary>
		[ImplementPropertyType("umbracoUrlAlias")]
		public string UmbracoUrlAlias
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlAlias(this); }
		}

		///<summary>
		/// URL slug: Optionally change the URL of the page
		///</summary>
		[ImplementPropertyType("umbracoUrlName")]
		public string UmbracoUrlName
		{
			get { return Umbraco.Web.PublishedContentModels.CAdmin.GetUmbracoUrlName(this); }
		}

		///<summary>
		/// Page description: Description of the page (only used on the website)
		///</summary>
		[ImplementPropertyType("pageDescription")]
		public object PageDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageDescription(this); }
		}

		///<summary>
		/// Page image
		///</summary>
		[ImplementPropertyType("pageImage")]
		public string PageImage
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageImage(this); }
		}

		///<summary>
		/// Page title
		///</summary>
		[ImplementPropertyType("pageTitle")]
		public string PageTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetPageTitle(this); }
		}

		///<summary>
		/// Show Call To Action: The call to action is found at the bottom of the page. The content for this can be found in the settings section under 'Call To Action'
		///</summary>
		[ImplementPropertyType("showCallToAction")]
		public bool ShowCallToAction
		{
			get { return Umbraco.Web.PublishedContentModels.CMeta.GetShowCallToAction(this); }
		}

		///<summary>
		/// Page content: Main content of the page
		///</summary>
		[ImplementPropertyType("pageContent")]
		public IEnumerable<IPublishedContent> PageContent
		{
			get { return Umbraco.Web.PublishedContentModels.CPageComponents.GetPageContent(this); }
		}

		///<summary>
		/// SEO description: Description shown when sharing the page on social platforms and search engine results
		///</summary>
		[ImplementPropertyType("seoDescription")]
		public object SeoDescription
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoDescription(this); }
		}

		///<summary>
		/// SEO title: When left empty the 'page name + website name' will be used
		///</summary>
		[ImplementPropertyType("seoTitle")]
		public object SeoTitle
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSeoTitle(this); }
		}

		///<summary>
		/// Social media image: Image used when sharing on social media
		///</summary>
		[ImplementPropertyType("socialMediaImage")]
		public string SocialMediaImage
		{
			get { return Umbraco.Web.PublishedContentModels.CSeo.GetSocialMediaImage(this); }
		}
	}

	/// <summary>Email Address</summary>
	[PublishedContentModel("emailAddress")]
	public partial class EmailAddress : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "emailAddress";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public EmailAddress(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<EmailAddress, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Email Address
		///</summary>
		[ImplementPropertyType("email")]
		public string Email
		{
			get { return this.GetPropertyValue<string>("email"); }
		}
	}

	/// <summary>Contact Number</summary>
	[PublishedContentModel("contactNumber")]
	public partial class ContactNumber : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "contactNumber";
		public new const PublishedItemType ModelItemType = PublishedItemType.Content;
#pragma warning restore 0109

		public ContactNumber(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<ContactNumber, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Number
		///</summary>
		[ImplementPropertyType("number")]
		public string Number
		{
			get { return this.GetPropertyValue<string>("number"); }
		}
	}

	/// <summary>Folder</summary>
	[PublishedContentModel("Folder")]
	public partial class Folder : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Folder";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Folder(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Folder, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Contents:
		///</summary>
		[ImplementPropertyType("contents")]
		public object Contents
		{
			get { return this.GetPropertyValue("contents"); }
		}
	}

	/// <summary>Image</summary>
	[PublishedContentModel("Image")]
	public partial class Image : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Image";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public Image(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Image, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload image
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public Umbraco.Web.Models.ImageCropDataSet UmbracoFile
		{
			get { return this.GetPropertyValue<Umbraco.Web.Models.ImageCropDataSet>("umbracoFile"); }
		}

		///<summary>
		/// Height
		///</summary>
		[ImplementPropertyType("umbracoHeight")]
		public string UmbracoHeight
		{
			get { return this.GetPropertyValue<string>("umbracoHeight"); }
		}

		///<summary>
		/// Width
		///</summary>
		[ImplementPropertyType("umbracoWidth")]
		public string UmbracoWidth
		{
			get { return this.GetPropertyValue<string>("umbracoWidth"); }
		}
	}

	/// <summary>File</summary>
	[PublishedContentModel("File")]
	public partial class File : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "File";
		public new const PublishedItemType ModelItemType = PublishedItemType.Media;
#pragma warning restore 0109

		public File(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<File, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Size
		///</summary>
		[ImplementPropertyType("umbracoBytes")]
		public string UmbracoBytes
		{
			get { return this.GetPropertyValue<string>("umbracoBytes"); }
		}

		///<summary>
		/// Type
		///</summary>
		[ImplementPropertyType("umbracoExtension")]
		public string UmbracoExtension
		{
			get { return this.GetPropertyValue<string>("umbracoExtension"); }
		}

		///<summary>
		/// Upload file
		///</summary>
		[ImplementPropertyType("umbracoFile")]
		public object UmbracoFile
		{
			get { return this.GetPropertyValue("umbracoFile"); }
		}
	}

	/// <summary>Member</summary>
	[PublishedContentModel("Member")]
	public partial class Member : PublishedContentModel
	{
#pragma warning disable 0109 // new is redundant
		public new const string ModelTypeAlias = "Member";
		public new const PublishedItemType ModelItemType = PublishedItemType.Member;
#pragma warning restore 0109

		public Member(IPublishedContent content)
			: base(content)
		{ }

#pragma warning disable 0109 // new is redundant
		public new static PublishedContentType GetModelContentType()
		{
			return PublishedContentType.Get(ModelItemType, ModelTypeAlias);
		}
#pragma warning restore 0109

		public static PublishedPropertyType GetModelPropertyType<TValue>(Expression<Func<Member, TValue>> selector)
		{
			return PublishedContentModelUtility.GetModelPropertyType(GetModelContentType(), selector);
		}

		///<summary>
		/// Is Approved
		///</summary>
		[ImplementPropertyType("umbracoMemberApproved")]
		public bool UmbracoMemberApproved
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberApproved"); }
		}

		///<summary>
		/// Comments
		///</summary>
		[ImplementPropertyType("umbracoMemberComments")]
		public string UmbracoMemberComments
		{
			get { return this.GetPropertyValue<string>("umbracoMemberComments"); }
		}

		///<summary>
		/// Failed Password Attempts
		///</summary>
		[ImplementPropertyType("umbracoMemberFailedPasswordAttempts")]
		public string UmbracoMemberFailedPasswordAttempts
		{
			get { return this.GetPropertyValue<string>("umbracoMemberFailedPasswordAttempts"); }
		}

		///<summary>
		/// Last Lockout Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLockoutDate")]
		public string UmbracoMemberLastLockoutDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLockoutDate"); }
		}

		///<summary>
		/// Last Login Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastLogin")]
		public string UmbracoMemberLastLogin
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastLogin"); }
		}

		///<summary>
		/// Last Password Change Date
		///</summary>
		[ImplementPropertyType("umbracoMemberLastPasswordChangeDate")]
		public string UmbracoMemberLastPasswordChangeDate
		{
			get { return this.GetPropertyValue<string>("umbracoMemberLastPasswordChangeDate"); }
		}

		///<summary>
		/// Is Locked Out
		///</summary>
		[ImplementPropertyType("umbracoMemberLockedOut")]
		public bool UmbracoMemberLockedOut
		{
			get { return this.GetPropertyValue<bool>("umbracoMemberLockedOut"); }
		}

		///<summary>
		/// Password Answer
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalAnswer")]
		public string UmbracoMemberPasswordRetrievalAnswer
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalAnswer"); }
		}

		///<summary>
		/// Password Question
		///</summary>
		[ImplementPropertyType("umbracoMemberPasswordRetrievalQuestion")]
		public string UmbracoMemberPasswordRetrievalQuestion
		{
			get { return this.GetPropertyValue<string>("umbracoMemberPasswordRetrievalQuestion"); }
		}
	}

}



// EOF
